{"version":3,"sources":["components/Header.js","components/Poza.js","poze.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Poza","link","desc","console","log","className","alt","src","poze","App","state","this","map","poz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOASeA,G,WANA,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAChB,OACC,4BAAKA,KCOQC,EAVF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAEpB,OADAC,QAAQC,IAAI,QAAUF,GAErB,yBAAKG,UAAU,QACd,yBAAKC,IAAM,OAAOC,IAAMN,IACxB,uBAAGI,UAAU,QAAb,IAAsBH,EAAtB,OCqBYM,EA5BK,CACnB,CACCP,KAAK,0EACLC,KAAK,SAEN,CACCD,KAAK,6EACLC,KAAK,gBAEN,CACCD,KAAK,mEACLC,KAAK,UAEN,CACCD,KAAK,4EACLC,KAAK,aAEN,CACCD,KAAK,mEACLC,KAAK,UAEN,CACED,KAAK,sFACLC,KAAK,WCUOO,E,YAzBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAAEF,QAFH,E,sEAQd,OADAL,QAAQC,IAAIO,KAAKD,MAAMF,MAGrB,yBAAKH,UAAU,MACb,kBAAC,EAAD,CAAQN,MAAM,YAEd,yBAAKM,UAAU,aAAf,IACEM,KAAKD,MAAMF,KAAKI,KAAI,SAACC,GAAD,OAChB,kBAAC,EAAD,CAAMZ,KAAMY,EAAIZ,KAAMC,KAAMW,EAAIX,gB,GAhB1BY,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.458b34bf.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nconst Header = ({title}) => {\n\treturn (\n\t\t<h1>{title}</h1> \n\t\t);\n}\n\nexport default Header;","import React from 'react';\n\nconst Poza = ({link, desc}) => {\n\tconsole.log(\"Poza:\" + desc)\n\treturn (\n\t\t<div className='item'>\n\t\t\t<img alt = 'poze' src= {link}/>\n\t\t\t<p className='desc'> {desc} </p>\n\t\t</div>\n\t\t);\n}\n\nexport default Poza;\n\n","export const poze = [\n\t{\n\t\tlink:'https://static.pexels.com/photos/52500/horse-herd-fog-nature-52500.jpeg',\n\t\tdesc:'Horse'\n\t},\n\t{\n\t\tlink:'https://static.pexels.com/photos/66898/elephant-cub-tsavo-kenya-66898.jpeg',\n\t\tdesc:'Elephant cub'\n\t},\n\t{\n\t\tlink:'https://static.pexels.com/photos/213399/pexels-photo-213399.jpeg',\n\t\tdesc:'Fishes'\n\t},\n\t{\n\t\tlink:'https://static.pexels.com/photos/158471/ibis-bird-red-animals-158471.jpeg',\n\t\tdesc:'Ibis Bird'\n\t},\n\t{\n\t\tlink:'https://static.pexels.com/photos/133459/pexels-photo-133459.jpeg',\n\t\tdesc:'Lemuri'\n\t},\n\t{\n\t\t\tlink:'https://static.pexels.com/photos/50988/ape-berber-monkeys-mammal-affchen-50988.jpeg',\n\t\t\tdesc:'Monkey'\n\t}\n\n];\n\nexport default poze;","import React, {Component} from 'react';\nimport Tachyons from 'tachyons';\nimport Header from './components/Header.js';\nimport Poza from './components/Poza.js';\nimport poze from './poze.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { poze }\n  }\n  \n\nrender() {\n  console.log(this.state.poze);\n  return (\n\n    <div className=\"tc\">\n      <Header title=\"Gallery\"/>\n\n      <div className=\"container\" > {\n        this.state.poze.map((poz) => (\n            <Poza link={poz.link} desc={poz.desc} /> \n                    ))\n      }\n      \n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}